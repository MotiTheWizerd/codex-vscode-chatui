{
  "metadata": {
    "projectName": "codex-vs-ext",
    "version": "0.0.1",
    "lastUpdated": "2025-09-05T21:13:37.810Z",
    "totalFiles": 32,
    "language": "TypeScript",
    "framework": "VSCode Extension"
  },
  "architecture": {
    "layers": [
      {
        "name": "ext",
        "description": "Extension entry point and command registrations",
        "files": [
          "src/ext/extension.ts",
          "src/ext/registrations/commands.ts"
        ],
        "responsibilities": [
          "Extension activation",
          "Command registration",
          "Lifecycle management"
        ]
      },
      {
        "name": "core",
        "description": "Business logic and main orchestration",
        "files": [
          "src/core/manager.ts",
          "src/core/event-bus.ts",
          "src/core/config.ts",
          "src/core/bootstrap.ts",
          "src/core/policy.ts",
          "src/core/di.ts"
        ],
        "responsibilities": [
          "Extension lifecycle",
          "Event coordination",
          "Dependency management",
          "Configuration management",
          "Policy enforcement"
        ]
      },
      {
        "name": "ui",
        "description": "User interface and webview management",
        "files": [
          "src/ui/chat-webview.ts",
          "src/ui/chat-panel-manager.ts",
          "src/ui/renderer.ts",
          "src/ui/bridge.ts"
        ],
        "responsibilities": [
          "Webview rendering",
          "User interactions",
          "UI state management",
          "Panel management"
        ]
      },
      {
        "name": "transport",
        "description": "External communication layer",
        "files": [
          "src/transport/client.ts",
          "src/transport/http.ts",
          "src/transport/ws-handler.ts",
          "src/transport/types.ts"
        ],
        "responsibilities": [
          "API communication",
          "WebSocket handling",
          "Request/response management",
          "Streaming responses"
        ]
      },
      {
        "name": "state",
        "description": "Session and state management",
        "files": [
          "src/state/session-store.ts",
          "src/state/migrations.ts"
        ],
        "responsibilities": [
          "Session persistence",
          "State management",
          "Data serialization"
        ]
      },
      {
        "name": "tools",
        "description": "Tool execution and management",
        "files": [
          "src/tools/tool-bus.ts",
          "src/tools/shell-tool.ts"
        ],
        "responsibilities": [
          "Tool registration",
          "Tool execution",
          "Plugin API"
        ]
      },
      {
        "name": "telemetry",
        "description": "Logging and telemetry",
        "files": [
          "src/telemetry/logger.ts",
          "src/telemetry/log.ts",
          "src/telemetry/metrics.ts",
          "src/telemetry/reporter.ts",
          "src/telemetry/err.ts",
          "src/telemetry/errors.ts"
        ],
        "responsibilities": [
          "Structured logging",
          "Error handling",
          "Metrics collection",
          "Telemetry reporting"
        ]
      },
      {
        "name": "config",
        "description": "Configuration management",
        "files": [
          "src/config/settings.ts",
          "src/config/secrets.ts"
        ],
        "responsibilities": [
          "Settings management",
          "Secret handling",
          "Configuration loading"
        ]
      },
      {
        "name": "types",
        "description": "Type definitions",
        "files": [
          "src/types/chat.ts",
          "src/types/tools.ts",
          "src/types/ipc.ts",
          "src/types/result.ts"
        ],
        "responsibilities": [
          "Shared type definitions",
          "Interface contracts",
          "Data structures"
        ]
      }
    ]
  },
  "dependencies": [
    {
      "file": "src/core/manager.ts",
      "imports": [
        {
          "module": "vscode",
          "type": "external",
          "usage": "Extension API integration"
        },
        {
          "module": "@/core/event-bus",
          "type": "internal",
          "usage": "Event coordination",
          "relationship": "uses"
        },
        {
          "module": "@/core/config",
          "type": "internal",
          "usage": "Configuration management",
          "relationship": "uses"
        },
        {
          "module": "@/core/policy",
          "type": "internal",
          "usage": "Policy enforcement",
          "relationship": "uses"
        },
        {
          "module": "@/core/di",
          "type": "internal",
          "usage": "Dependency injection",
          "relationship": "uses"
        },
        {
          "module": "@/transport/client",
          "type": "internal",
          "usage": "External API communication",
          "relationship": "orchestrates"
        },
        {
          "module": "@/state/session-store",
          "type": "internal",
          "usage": "Session persistence",
          "relationship": "manages"
        },
        {
          "module": "@/tools/tool-bus",
          "type": "internal",
          "usage": "Tool execution",
          "relationship": "uses"
        },
        {
          "module": "@/telemetry/logger",
          "type": "internal",
          "usage": "Logging",
          "relationship": "uses"
        },
        {
          "module": "@/config/settings",
          "type": "internal",
          "usage": "Settings management",
          "relationship": "uses"
        },
        {
          "module": "@/files/service",
          "type": "internal",
          "usage": "File operations",
          "relationship": "uses"
        },
        {
          "module": "@/types/chat",
          "type": "internal",
          "usage": "Type definitions",
          "relationship": "uses"
        },
        {
          "module": "@core/events",
          "type": "internal",
          "usage": "Event definitions",
          "relationship": "uses"
        }
      ],
      "dependents": [
        "src/ext/extension.ts",
        "src/ui/chat-webview.ts"
      ]
    },
    {
      "file": "src/ui/chat-webview.ts",
      "imports": [
        {
          "module": "vscode",
          "type": "external",
          "usage": "Webview API integration"
        },
        {
          "module": "@/core/manager",
          "type": "internal",
          "usage": "Core functionality access",
          "relationship": "uses"
        },
        {
          "module": "@/telemetry/logger",
          "type": "internal",
          "usage": "Logging",
          "relationship": "uses"
        }
      ],
      "dependents": [
        "src/ui/chat-panel-manager.ts"
      ]
    }
  ],
  "patterns": [
    {
      "type": "Singleton",
      "files": [
        "src/core/manager.ts",
        "src/telemetry/log.ts"
      ],
      "description": "Single instance of core manager and logger"
    },
    {
      "type": "Observer",
      "files": [
        "src/core/event-bus.ts"
      ],
      "description": "Event-driven communication"
    },
    {
      "type": "Facade",
      "files": [
        "src/transport/client.ts"
      ],
      "description": "Simplified interface for external APIs"
    },
    {
      "type": "Factory",
      "files": [
        "src/ui/chat-webview.ts",
        "src/ui/chat-panel-manager.ts"
      ],
      "description": "Factory pattern for creating chat webviews"
    },
    {
      "type": "Dependency Injection",
      "files": [
        "src/core/di.ts",
        "src/core/manager.ts"
      ],
      "description": "Dependency injection container for service management"
    }
  ],
  "hotspots": [
    {
      "file": "src/core/manager.ts",
      "complexity": "high",
      "reason": "Central orchestration point with many dependencies",
      "risk": "Single point of failure"
    },
    {
      "file": "src/ui/chat-webview.ts",
      "complexity": "high",
      "reason": "Complex webview message handling and event coordination",
      "risk": "UI/UX issues if broken"
    },
    {
      "file": "src/transport/client.ts",
      "complexity": "medium",
      "reason": "Handles external API communication with retry logic",
      "risk": "Communication failures if broken"
    }
  ]
}