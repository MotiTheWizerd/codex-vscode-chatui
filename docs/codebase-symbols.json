{
  "classes": [
    {
      "name": "CoreManager",
      "file": "src/core/manager.ts",
      "line": 23,
      "access": "export",
      "extends": null,
      "implements": [
        "vscode.Disposable"
      ],
      "description": "Main orchestrator for extension functionality",
      "complexity": "high",
      "responsibilities": [
        "Extension lifecycle management",
        "Component coordination",
        "Event orchestration",
        "Resource cleanup"
      ],
      "methods": [
        {
          "name": "initialize",
          "signature": "async initialize(): Promise<void>",
          "line": 45,
          "access": "public",
          "description": "Initializes all core components",
          "parameters": [],
          "returns": "Promise<void>",
          "throws": [
            "Error"
          ],
          "complexity": "medium"
        },
        {
          "name": "dispose",
          "signature": "dispose(): void",
          "line": 235,
          "access": "public",
          "description": "Cleanup resources and dispose components",
          "parameters": [],
          "returns": "void"
        },
        {
          "name": "shutdown",
          "signature": "async shutdown(): Promise<void>",
          "line": 190,
          "access": "public",
          "description": "Gracefully shutdown the extension",
          "parameters": [],
          "returns": "Promise<void>"
        }
      ],
      "properties": [
        {
          "name": "eventBus",
          "type": "EventBus",
          "access": "private readonly",
          "readonly": true,
          "description": "Central event coordination system"
        },
        {
          "name": "configService",
          "type": "ConfigService",
          "access": "private readonly",
          "readonly": true,
          "description": "Configuration service"
        }
      ],
      "dependencies": [
        "EventBus",
        "ConfigService",
        "PolicyGuard",
        "DIContainer",
        "Logger",
        "SettingsManager",
        "SessionStore",
        "ToolBus",
        "FilesService",
        "CodexClient"
      ],
      "usedBy": [
        "ChatWebview",
        "CommandRegistration",
        "Bootstrap"
      ]
    },
    {
      "name": "ChatWebview",
      "file": "src/ui/chat-webview.ts",
      "line": 7,
      "access": "export",
      "extends": null,
      "implements": [
        "vscode.Disposable"
      ],
      "description": "Webview panel for chat interface",
      "complexity": "high",
      "responsibilities": [
        "Webview panel management",
        "Message handling",
        "Event coordination with core"
      ],
      "methods": [
        {
          "name": "create",
          "signature": "static create(context: vscode.ExtensionContext, core: CoreManager, logger: Logger | null, onDispose?: () => void): ChatWebview",
          "line": 180,
          "access": "public static",
          "description": "Factory method to create a new chat webview",
          "parameters": [
            {
              "name": "context",
              "type": "vscode.ExtensionContext",
              "description": "VS Code extension context"
            },
            {
              "name": "core",
              "type": "CoreManager",
              "description": "Core manager instance"
            },
            {
              "name": "logger",
              "type": "Logger | null",
              "description": "Logger instance"
            },
            {
              "name": "onDispose",
              "type": "() => void",
              "description": "Callback when disposed"
            }
          ],
          "returns": "ChatWebview"
        },
        {
          "name": "dispose",
          "signature": "dispose(): void",
          "line": 205,
          "access": "public",
          "description": "Dispose of the webview resources",
          "parameters": [],
          "returns": "void"
        }
      ],
      "properties": [
        {
          "name": "panel",
          "type": "vscode.WebviewPanel",
          "access": "private",
          "readonly": false,
          "description": "The webview panel"
        }
      ],
      "dependencies": [
        "vscode",
        "CoreManager",
        "Logger"
      ],
      "usedBy": [
        "ChatPanelManager"
      ]
    },
    {
      "name": "EventBus",
      "file": "src/core/event-bus.ts",
      "line": 4,
      "access": "export",
      "extends": null,
      "implements": [],
      "description": "Centralized event bus for inter-component communication",
      "complexity": "low",
      "responsibilities": [
        "Event subscription",
        "Event publishing",
        "Handler management"
      ],
      "methods": [
        {
          "name": "subscribe",
          "signature": "subscribe(event: string, handler: EventHandler): void",
          "line": 11,
          "access": "public",
          "description": "Subscribe to an event",
          "parameters": [
            {
              "name": "event",
              "type": "string",
              "description": "Event name"
            },
            {
              "name": "handler",
              "type": "EventHandler",
              "description": "Event handler function"
            }
          ],
          "returns": "void"
        },
        {
          "name": "publish",
          "signature": "publish(event: string, ...args: unknown[]): void",
          "line": 23,
          "access": "public",
          "description": "Publish an event with arguments",
          "parameters": [
            {
              "name": "event",
              "type": "string",
              "description": "Event name"
            },
            {
              "name": "args",
              "type": "unknown[]",
              "description": "Event arguments"
            }
          ],
          "returns": "void"
        },
        {
          "name": "unsubscribe",
          "signature": "unsubscribe(event: string, handler: EventHandler): void",
          "line": 17,
          "access": "public",
          "description": "Unsubscribe from an event",
          "parameters": [
            {
              "name": "event",
              "type": "string",
              "description": "Event name"
            },
            {
              "name": "handler",
              "type": "EventHandler",
              "description": "Event handler function"
            }
          ],
          "returns": "void"
        }
      ],
      "properties": [],
      "dependencies": [
        "Logger"
      ],
      "usedBy": [
        "CoreManager",
        "ChatWebview"
      ]
    },
    {
      "name": "SessionStore",
      "file": "src/state/session-store.ts",
      "line": 9,
      "access": "export",
      "extends": null,
      "implements": [],
      "description": "Manages chat sessions and persistence",
      "complexity": "medium",
      "responsibilities": [
        "Session creation",
        "Message management",
        "State persistence"
      ],
      "methods": [
        {
          "name": "createSession",
          "signature": "async createSession(): Promise<ChatSession>",
          "line": 70,
          "access": "public",
          "description": "Create a new chat session",
          "parameters": [],
          "returns": "Promise<ChatSession>"
        },
        {
          "name": "addMessageToCurrentSession",
          "signature": "async addMessageToCurrentSession(message: Omit<ChatMessage, 'id' | 'timestamp'>): Promise<ChatMessage>",
          "line": 110,
          "access": "public",
          "description": "Add a message to the current session",
          "parameters": [
            {
              "name": "message",
              "type": "Omit<ChatMessage, 'id' | 'timestamp'>",
              "description": "Message to add"
            }
          ],
          "returns": "Promise<ChatMessage>"
        }
      ],
      "properties": [],
      "dependencies": [
        "vscode",
        "Logger"
      ],
      "usedBy": [
        "CoreManager"
      ]
    },
    {
      "name": "CodexClient",
      "file": "src/transport/client.ts",
      "line": 10,
      "access": "export",
      "extends": null,
      "implements": [],
      "description": "Client for communicating with Codex server",
      "complexity": "medium",
      "responsibilities": [
        "API communication",
        "Message sending",
        "Response streaming"
      ],
      "methods": [
        {
          "name": "sendMessage",
          "signature": "async sendMessage(message: string, options?: Record<string, unknown>): Promise<unknown>",
          "line": 28,
          "access": "public",
          "description": "Send a message to the Codex server",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "description": "Message to send"
            },
            {
              "name": "options",
              "type": "Record<string, unknown>",
              "description": "Additional options"
            }
          ],
          "returns": "Promise<unknown>"
        },
        {
          "name": "streamResponse",
          "signature": "async streamResponse(message: string, onToken: (token: string) => void, options?: Record<string, unknown>): Promise<void>",
          "line": 65,
          "access": "public",
          "description": "Stream a response from the Codex server",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "description": "Message to send"
            },
            {
              "name": "onToken",
              "type": "(token: string) => void",
              "description": "Callback for each token"
            },
            {
              "name": "options",
              "type": "Record<string, unknown>",
              "description": "Additional options"
            }
          ],
          "returns": "Promise<void>"
        }
      ],
      "properties": [],
      "dependencies": [
        "ConfigService",
        "Logger"
      ],
      "usedBy": [
        "CoreManager"
      ]
    }
  ],
  "interfaces": [
    {
      "name": "ChatMessage",
      "file": "src/types/chat.ts",
      "line": 1,
      "description": "Contract for chat message data",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Unique message identifier"
        },
        {
          "name": "role",
          "type": "'user' | 'assistant' | 'system'",
          "required": true,
          "description": "Message sender role"
        },
        {
          "name": "content",
          "type": "string",
          "required": true,
          "description": "Message text content"
        },
        {
          "name": "timestamp",
          "type": "Date",
          "required": true,
          "description": "When message was created"
        }
      ],
      "usedBy": [
        "ChatSession",
        "ChatWebview",
        "SessionStore"
      ],
      "extends": []
    },
    {
      "name": "ChatSession",
      "file": "src/types/chat.ts",
      "line": 7,
      "description": "Contract for chat session data",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "Unique session identifier"
        },
        {
          "name": "messages",
          "type": "ChatMessage[]",
          "required": true,
          "description": "Messages in the session"
        },
        {
          "name": "createdAt",
          "type": "Date",
          "required": true,
          "description": "When session was created"
        },
        {
          "name": "updatedAt",
          "type": "Date",
          "required": true,
          "description": "When session was last updated"
        }
      ],
      "usedBy": [
        "SessionStore",
        "CoreManager"
      ],
      "extends": []
    },
    {
      "name": "Tool",
      "file": "src/types/tools.ts",
      "line": 1,
      "description": "Contract for tool plugins",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "required": true,
          "description": "Tool name"
        },
        {
          "name": "description",
          "type": "string",
          "required": true,
          "description": "Tool description"
        },
        {
          "name": "parameters",
          "type": "I",
          "required": true,
          "description": "Tool parameters type"
        },
        {
          "name": "execute",
          "type": "(args: I) => Promise<O>",
          "required": true,
          "description": "Tool execution function"
        }
      ],
      "usedBy": [
        "ToolBus",
        "ShellTool"
      ],
      "extends": []
    }
  ],
  "functions": [
    {
      "name": "activate",
      "file": "src/ext/extension.ts",
      "line": 4,
      "signature": "async function activate(context: vscode.ExtensionContext): Promise<void>",
      "access": "export",
      "description": "VSCode extension activation entry point",
      "parameters": [
        {
          "name": "context",
          "type": "vscode.ExtensionContext",
          "description": "VSCode extension context"
        }
      ],
      "returns": "Promise<void>",
      "complexity": "low"
    },
    {
      "name": "bootstrap",
      "file": "src/core/bootstrap.ts",
      "line": 5,
      "signature": "async function bootstrap(context: vscode.ExtensionContext): Promise<void>",
      "access": "export",
      "description": "Bootstrap the extension core services",
      "parameters": [
        {
          "name": "context",
          "type": "vscode.ExtensionContext",
          "description": "VSCode extension context"
        }
      ],
      "returns": "Promise<void>",
      "complexity": "low"
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "EventHandler",
      "file": "src/core/event-bus.ts",
      "definition": "type EventHandler = (...args: unknown[]) => void",
      "description": "Generic event handler function signature",
      "usedBy": [
        "EventBus"
      ]
    },
    {
      "name": "ShellIn",
      "file": "src/types/tools.ts",
      "definition": "interface ShellIn { command: string }",
      "description": "Input type for shell tool",
      "usedBy": [
        "ShellTool"
      ]
    },
    {
      "name": "ShellOut",
      "file": "src/types/tools.ts",
      "definition": "interface ShellOut { stdout: string; stderr: string; exitCode: number }",
      "description": "Output type for shell tool",
      "usedBy": [
        "ShellTool"
      ]
    }
  ]
}